{:rename-macros {}, :renames {}, :externs {Error {}, goog {string {StringBuffer {prototype {append {}}}}}}, :use-macros {}, :excludes #{cat * or merge keys + and def}, :name cljs.spec, :imports nil, :requires {cljs.core cljs.core, gobj goog.object, goog.object goog.object, walk clojure.walk, gen cljs.spec.impl.gen, cljs.spec.impl.gen cljs.spec.impl.gen, c cljs.core, str clojure.string, clojure.string clojure.string, clojure.walk clojure.walk}, :uses nil, :defs {form {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 162, :column 7, :end-line 162, :end-column 11, :arglists (quote ([spec])), :doc "returns the spec as data"}, :name cljs.spec/form, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 11, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "returns the spec as data"}, ->t_cljs$spec35274 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn meta35275])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec35274, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :method-params ([forms preds gfn meta35275]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 767, :max-fixed-arity 4, :fn-var true, :arglists (quote ([forms preds gfn meta35275])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, nilable-impl {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1354, :column 19, :end-line 1354, :end-column 31, :skip-wiki true, :arglists (quote ([form pred gfn])), :doc "Do not call this directly, use 'nilable'"}, :name cljs.spec/nilable-impl, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 31, :method-params ([form pred gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 1354, :end-line 1354, :max-fixed-arity 3, :fn-var true, :arglists (quote ([form pred gfn])), :doc "Do not call this directly, use 'nilable'"}, *recursion-limit* {:meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 21, :column 16, :end-line 21, :end-column 33, :dynamic true}, :name cljs.spec/*recursion-limit*, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 33, :column 1, :dynamic true, :line 21, :end-line 21, :tag number, :doc "A soft limit on how many times a branching spec (or/alt/*/opt-keys/multi-spec)\n  can be recursed through during generation. After this a\n  non-recursive branch will be chosen."}, *coll-error-limit* {:meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 35, :column 16, :end-line 35, :end-column 34, :dynamic true}, :name cljs.spec/*coll-error-limit*, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 34, :column 1, :dynamic true, :line 35, :end-line 35, :tag number, :doc "The number of errors reported by explain in a collection spec'ed with 'every'"}, explain-printer {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 214, :column 7, :end-line 214, :end-column 22, :arglists (quote ([ed])), :doc "Default printer for explain-data. nil indicates a successful validation."}, :name cljs.spec/explain-printer, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 22, :method-params ([ed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 214, :end-line 214, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ed])), :doc "Default printer for explain-data. nil indicates a successful validation."}, op-explain {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1106, :column 8, :end-line 1106, :end-column 18, :private true, :arglists (quote ([form p path via in input]))}, :private true, :name cljs.spec/op-explain, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 18, :method-params ([form p path via in input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1106, :end-line 1106, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form p path via in input]))}, Specize {:meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 123, :column 14, :end-line 123, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {specize* [[_] [_ form]]}}}, :protocol-symbol true, :name cljs.spec/Specize, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 21, :column 1, :line 123, :protocol-info {:methods {specize* [[_] [_ form]]}}, :info nil, :end-line 123, :tag any, :impls #{cljs.spec/t_cljs$spec35014 cljs.spec/t_cljs$spec35293 cljs.spec/t_cljs$spec35118 cljs.spec/t_cljs$spec35274 cljs.core/Keyword cljs.spec/t_cljs$spec35158 cljs.spec/t_cljs$spec35588 cljs.spec/t_cljs$spec35555 cljs.spec/t_cljs$spec35558 default cljs.spec/t_cljs$spec35572 cljs.spec/t_cljs$spec35150 cljs.spec/t_cljs$spec35585 cljs.spec/t_cljs$spec35568 cljs.spec/t_cljs$spec35103 cljs.spec/t_cljs$spec35053 cljs.core/Symbol cljs.spec/t_cljs$spec35260 cljs.spec/t_cljs$spec35136 cljs.spec/t_cljs$spec35277 cljs.spec/t_cljs$spec35256 cljs.spec/t_cljs$spec35594 cljs.spec/t_cljs$spec35591}, :doc nil, :jsdoc ("@interface")}, t_cljs$spec35158 {:num-fields 9, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec35158, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :type true, :anonymous true, :column 5, :line 648, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, alt-impl {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 990, :column 19, :end-line 990, :end-column 27, :skip-wiki true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'alt'"}, :name cljs.spec/alt-impl, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 27, :method-params ([ks ps forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 990, :end-line 990, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'alt'"}, tagged-ret {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 604, :column 8, :end-line 604, :end-column 18, :private true, :arglists (quote ([v]))}, :private true, :name cljs.spec/tagged-ret, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 18, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 604, :end-line 604, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, t_cljs$spec35558 {:num-fields 3, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec35558, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :type true, :anonymous true, :column 3, :line 1241, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, pvalid? {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 362, :column 8, :end-line 362, :end-column 15, :private true, :arglists (quote ([pred x] [pred x form])), :doc "internal helper function that returns true when x is valid for spec.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([pred x] [pred x form]), :arglists ([pred x] [pred x form]), :arglists-meta (nil nil)}}, :private true, :name cljs.spec/pvalid?, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([pred x] [pred x form]), :arglists ([pred x] [pred x form]), :arglists-meta (nil nil)}, :method-params ([pred x] [pred x form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 362, :end-line 362, :max-fixed-arity 3, :fn-var true, :arglists ([pred x] [pred x form]), :doc "internal helper function that returns true when x is valid for spec."}, t_cljs$spec35053 {:num-fields 19, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec35053, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :type true, :anonymous true, :column 5, :line 383, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec35594 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form pred gfn spec meta35595])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec35594, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :method-params ([form pred gfn spec meta35595]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1358, :max-fixed-arity 5, :fn-var true, :arglists (quote ([form pred gfn spec meta35595])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, def-impl {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 290, :column 19, :end-line 290, :end-column 27, :skip-wiki true, :arglists (quote ([k form spec])), :doc "Do not call this directly, use 'def'"}, :name cljs.spec/def-impl, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 27, :method-params ([k form spec]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 290, :end-line 290, :max-fixed-arity 3, :fn-var true, :arglists (quote ([k form spec])), :doc "Do not call this directly, use 'def'"}, *explain-out* {:name cljs.spec/*explain-out*, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 246, :column 1, :end-line 246, :end-column 29, :dynamic true, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 246, :column 16, :end-line 246, :end-column 29, :dynamic true}}, t_cljs$spec35594 {:num-fields 5, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec35594, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :type true, :anonymous true, :column 5, :line 1358, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec35136 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn specs cnt meta35137])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec35136, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :method-params ([forms preds gfn specs cnt meta35137]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 548, :max-fixed-arity 6, :fn-var true, :arglists (quote ([forms preds gfn specs cnt meta35137])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, *runtime-asserts* {:meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1425, :column 3, :end-line 1425, :end-column 20, :private true, :dynamic true}, :private true, :name cljs.spec/*runtime-asserts*, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 20, :column 1, :dynamic true, :line 1423, :end-line 1425, :tag boolean}, ->t_cljs$spec35591 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form pred gfn spec meta35592])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec35591, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :method-params ([form pred gfn spec meta35592]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1358, :max-fixed-arity 5, :fn-var true, :arglists (quote ([form pred gfn spec meta35592])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, regex-spec-impl {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1238, :column 19, :end-line 1238, :end-column 34, :skip-wiki true, :arglists (quote ([re gfn])), :doc "Do not call this directly, use 'spec' with a regex op argument"}, :name cljs.spec/regex-spec-impl, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 34, :method-params ([re gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 1238, :end-line 1238, :max-fixed-arity 2, :fn-var true, :arglists (quote ([re gfn])), :doc "Do not call this directly, use 'spec' with a regex op argument"}, merge-spec-impl {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 764, :column 19, :end-line 764, :end-column 34, :skip-wiki true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'merge'"}, :name cljs.spec/merge-spec-impl, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 34, :method-params ([forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 764, :end-line 764, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'merge'"}, explain-data* {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 200, :column 7, :end-line 200, :end-column 20, :arglists (quote ([spec path via in x]))}, :name cljs.spec/explain-data*, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 20, :method-params ([spec path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec path via in x]))}, add-ret {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1057, :column 8, :end-line 1057, :end-column 15, :private true, :arglists (quote ([p r k]))}, :private true, :name cljs.spec/add-ret, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 15, :method-params ([p r k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1057, :end-line 1057, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p r k]))}, explain-pred-list {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 689, :column 8, :end-line 689, :end-column 25, :private true, :arglists (quote ([forms preds path via in x]))}, :private true, :name cljs.spec/explain-pred-list, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 25, :method-params ([forms preds path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 689, :end-line 689, :max-fixed-arity 6, :fn-var true, :arglists (quote ([forms preds path via in x]))}, MAX_INT {:name cljs.spec/MAX_INT, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 19, :column 1, :end-line 19, :end-column 21, :const true, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 19, :column 14, :end-line 19, :end-column 21, :const true}, :tag number}, check-asserts {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1433, :column 7, :end-line 1433, :end-column 20, :arglists (quote ([flag])), :doc "Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec/*runtime-asserts*.\nDefaults to false."}, :name cljs.spec/check-asserts, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 20, :method-params ([flag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1433, :end-line 1433, :max-fixed-arity 1, :fn-var true, :arglists (quote ([flag])), :doc "Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec/*runtime-asserts*.\nDefaults to false."}, alt2 {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 988, :column 8, :end-line 988, :end-column 12, :private true, :arglists (quote ([p1 p2]))}, :private true, :name cljs.spec/alt2, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 12, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 988, :end-line 988, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, assert* {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1441, :column 7, :end-line 1441, :end-column 14, :arglists (quote ([spec x])), :doc "Do not call this directly, use 'assert'."}, :name cljs.spec/assert*, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1441, :end-line 1441, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Do not call this directly, use 'assert'."}, inst-in-range? {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1389, :column 7, :end-line 1389, :end-column 21, :arglists (quote ([start end inst])), :doc "Return true if inst at or after start and before end"}, :name cljs.spec/inst-in-range?, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 21, :method-params ([start end inst]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1389, :end-line 1389, :max-fixed-arity 3, :fn-var true, :arglists (quote ([start end inst])), :doc "Return true if inst at or after start and before end"}, registry-ref {:name cljs.spec/registry-ref, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 47, :column 1, :end-line 47, :end-column 32, :private true, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 47, :column 20, :end-line 47, :end-column 32, :private true}, :tag any}, accept? {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 925, :column 8, :end-line 925, :end-column 15, :private true, :arglists (quote ([{:keys [:cljs.spec/op]}]))}, :private true, :name cljs.spec/accept?, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 15, :method-params ([p__35329]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 925, :end-line 925, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [:cljs.spec/op]}]))}, and-spec-impl {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 700, :column 19, :end-line 700, :end-column 32, :skip-wiki true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'and'"}, :name cljs.spec/and-spec-impl, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 32, :method-params ([forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 700, :end-line 700, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'and'"}, accept {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 923, :column 8, :end-line 923, :end-column 14, :private true, :arglists (quote ([x]))}, :private true, :name cljs.spec/accept, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 923, :end-line 923, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, recur-limit? {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 333, :column 8, :end-line 333, :end-column 20, :private true, :arglists (quote ([rmap id path k]))}, :private true, :name cljs.spec/recur-limit?, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 20, :method-params ([rmap id path k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 333, :end-line 333, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rmap id path k]))}, ->t_cljs$spec35256 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn specs cform meta35257])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec35256, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :method-params ([forms preds gfn specs cform meta35257]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 731, :max-fixed-arity 6, :fn-var true, :arglists (quote ([forms preds gfn specs cform meta35257])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, describe* {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 45, :column 4, :end-line 45, :end-column 13, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec]))}, :protocol cljs.spec/Spec, :name cljs.spec/describe*, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 13, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc nil}, map-spec-impl {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 376, :column 19, :end-line 376, :end-column 32, :skip-wiki true, :arglists (quote ([{:keys [req-un opt-un keys-pred pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn], :as argm}])), :doc "Do not call this directly, use 'spec' with a map argument"}, :name cljs.spec/map-spec-impl, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 32, :method-params ([p__35011]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 376, :end-line 376, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [req-un opt-un keys-pred pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn], :as argm}])), :doc "Do not call this directly, use 'spec' with a map argument"}, reg-resolve! {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 66, :column 8, :end-line 66, :end-column 20, :private true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"}, :private true, :name cljs.spec/reg-resolve!, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 20, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"}, re-explain {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1212, :column 8, :end-line 1212, :end-column 18, :private true, :arglists (quote ([path via in re input]))}, :private true, :name cljs.spec/re-explain, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 18, :method-params ([path via in re input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1212, :end-line 1212, :max-fixed-arity 5, :fn-var true, :arglists (quote ([path via in re input]))}, t_cljs$spec35260 {:num-fields 6, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec35260, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :type true, :anonymous true, :column 5, :line 731, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, alts {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 987, :column 8, :end-line 987, :end-column 12, :private true, :arglists (quote ([& ps])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}}, :private true, :name cljs.spec/alts, :variadic true, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}, :method-params [(ps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 987, :end-line 987, :max-fixed-arity 0, :fn-var true, :arglists ([& ps])}, t_cljs$spec35014 {:num-fields 19, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec35014, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :type true, :anonymous true, :column 5, :line 383, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec35053 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([keys->specnames opt req-un opt-un p__35011 gfn pred-exprs keys-pred argm opt-keys req-specs map__35051 req id req-keys opt-specs k->s pred-forms meta35054])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec35053, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :method-params ([keys->specnames opt req-un opt-un p__35011 gfn pred-exprs keys-pred argm opt-keys req-specs map__35051 req id req-keys opt-specs k->s pred-forms meta35054]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 383, :max-fixed-arity 19, :fn-var true, :arglists (quote ([keys->specnames opt req-un opt-un p__35011 gfn pred-exprs keys-pred argm opt-keys req-specs map__35051 req id req-keys opt-specs k->s pred-forms meta35054])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, with-name {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 85, :column 8, :end-line 85, :end-column 17, :private true, :arglists (quote ([spec name]))}, :private true, :name cljs.spec/with-name, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 17, :method-params ([spec name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec name]))}, explain {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 254, :column 7, :end-line 254, :end-column 14, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, prints an explanation to *out*."}, :name cljs.spec/explain, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :end-line 254, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, prints an explanation to *out*."}, spec-name {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 93, :column 8, :end-line 93, :end-column 17, :private true, :arglists (quote ([spec]))}, :private true, :name cljs.spec/spec-name, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 17, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec]))}, map-spec {:name cljs.spec/map-spec, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 317, :column 1, :end-line 317, :end-column 18, :declared true, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 317, :column 10, :end-line 317, :end-column 18, :declared true}}, t_cljs$spec35150 {:num-fields 9, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec35150, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :type true, :anonymous true, :column 5, :line 648, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec35568 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :factory :positional, :arglists (quote ([argspec aform retspec rform fnspec fform gfn specs meta35569])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/->t_cljs$spec35568, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :method-params ([argspec aform retspec rform fnspec fform gfn specs meta35569]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1290, :max-fixed-arity 9, :fn-var true, :arglists (quote ([argspec aform retspec rform fnspec fform gfn specs meta35569])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, with-gen* {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 44, :column 4, :end-line 44, :end-column 13, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec gfn]))}, :protocol cljs.spec/Spec, :name cljs.spec/with-gen*, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 13, :method-params ([spec gfn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec gfn])), :doc nil}, t_cljs$spec35103 {:num-fields 6, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec35103, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :type true, :anonymous true, :column 6, :line 468, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, or-spec-impl {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 610, :column 19, :end-line 610, :end-column 31, :skip-wiki true, :arglists (quote ([keys forms preds gfn])), :doc "Do not call this directly, use 'or'"}, :name cljs.spec/or-spec-impl, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 31, :method-params ([keys forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 610, :end-line 610, :max-fixed-arity 4, :fn-var true, :arglists (quote ([keys forms preds gfn])), :doc "Do not call this directly, use 'or'"}, ->t_cljs$spec35014 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([keys->specnames opt req-un opt-un p__35011 gfn pred-exprs keys-pred argm opt-keys req-specs req id req-keys opt-specs map__35012 k->s pred-forms meta35015])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec35014, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :method-params ([keys->specnames opt req-un opt-un p__35011 gfn pred-exprs keys-pred argm opt-keys req-specs req id req-keys opt-specs map__35012 k->s pred-forms meta35015]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 383, :max-fixed-arity 19, :fn-var true, :arglists (quote ([keys->specnames opt req-un opt-un p__35011 gfn pred-exprs keys-pred argm opt-keys req-specs req id req-keys opt-specs map__35012 k->s pred-forms meta35015])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, specize {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 140, :column 8, :end-line 140, :end-column 15, :private true, :arglists (quote ([s] [s form])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s form]), :arglists ([s] [s form]), :arglists-meta (nil nil)}}, :private true, :name cljs.spec/specize, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s form]), :arglists ([s] [s form]), :arglists-meta (nil nil)}, :method-params ([s] [s form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s form])}, *fspec-iterations* {:meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 27, :column 16, :end-line 27, :end-column 34, :dynamic true}, :name cljs.spec/*fspec-iterations*, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 34, :column 1, :dynamic true, :line 27, :end-line 27, :tag number, :doc "The number of times an anonymous fn specified by fspec will be (generatively) tested during conform"}, Spec {:meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 39, :column 14, :end-line 39, :end-column 18, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {conform* [[spec x]], unform* [[spec y]], explain* [[spec path via in x]], gen* [[spec overrides path rmap]], with-gen* [[spec gfn]], describe* [[spec]]}}}, :protocol-symbol true, :name cljs.spec/Spec, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 18, :column 1, :line 39, :protocol-info {:methods {conform* [[spec x]], unform* [[spec y]], explain* [[spec path via in x]], gen* [[spec overrides path rmap]], with-gen* [[spec gfn]], describe* [[spec]]}}, :info nil, :end-line 39, :tag any, :impls #{cljs.spec/t_cljs$spec35014 cljs.spec/t_cljs$spec35293 cljs.spec/t_cljs$spec35118 cljs.spec/t_cljs$spec35274 cljs.spec/t_cljs$spec35158 cljs.spec/t_cljs$spec35588 cljs.spec/t_cljs$spec35555 cljs.spec/t_cljs$spec35558 cljs.spec/t_cljs$spec35572 cljs.spec/t_cljs$spec35150 cljs.spec/t_cljs$spec35585 cljs.spec/t_cljs$spec35568 cljs.spec/t_cljs$spec35103 cljs.spec/t_cljs$spec35053 cljs.spec/t_cljs$spec35260 cljs.spec/t_cljs$spec35136 cljs.spec/t_cljs$spec35277 cljs.spec/t_cljs$spec35256 cljs.spec/t_cljs$spec35594 cljs.spec/t_cljs$spec35591}, :doc nil, :jsdoc ("@interface")}, unform {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 155, :column 7, :end-line 155, :end-column 13, :arglists (quote ([spec x])), :doc "Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."}, :name cljs.spec/unform, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 13, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."}, valid? {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 353, :column 7, :end-line 353, :end-column 13, :arglists (quote ([spec x] [spec x form])), :doc "Helper function that returns true when x is valid for spec.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec x] [spec x form]), :arglists ([spec x] [spec x form]), :arglists-meta (nil nil)}}, :name cljs.spec/valid?, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec x] [spec x form]), :arglists ([spec x] [spec x form]), :arglists-meta (nil nil)}, :method-params ([spec x] [spec x form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 353, :end-line 353, :max-fixed-arity 3, :fn-var true, :arglists ([spec x] [spec x form]), :doc "Helper function that returns true when x is valid for spec."}, t_cljs$spec35274 {:num-fields 4, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec35274, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :type true, :anonymous true, :column 3, :line 767, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, gen {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 277, :column 7, :end-line 277, :end-column 10, :arglists (quote ([spec] [spec overrides])), :doc "Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([spec] [spec overrides]), :arglists ([spec] [spec overrides]), :arglists-meta (nil nil)}}, :name cljs.spec/gen, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([spec] [spec overrides]), :arglists ([spec] [spec overrides]), :arglists-meta (nil nil)}, :method-params ([spec] [spec overrides]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 277, :end-line 277, :max-fixed-arity 2, :fn-var true, :arglists ([spec] [spec overrides]), :doc "Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)"}, ->t_cljs$spec35588 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([spec meta35589])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec35588, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :method-params ([spec meta35589]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1338, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec meta35589])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec35118 {:num-fields 9, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec35118, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :type true, :anonymous true, :column 6, :line 504, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec35118 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form mmvar retag gfn id predx dval tag meta35119])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec35118, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :method-params ([form mmvar retag gfn id predx dval tag meta35119]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 504, :max-fixed-arity 9, :fn-var true, :arglists (quote ([form mmvar retag gfn id predx dval tag meta35119])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec35585 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([spec meta35586])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec35585, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :method-params ([spec meta35586]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1338, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec meta35586])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec35293 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form max-count map__35288 check? gfn gen-max pred cpred kindform conform-keys kind-form addcv cfns vec__35290 distinct kindfn spec p__35287 kfn gen-into count min-count opts kind conform-all conform-into meta35294])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec35293, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :method-params ([form max-count map__35288 check? gfn gen-max pred cpred kindform conform-keys kind-form addcv cfns vec__35290 distinct kindfn spec p__35287 kfn gen-into count min-count opts kind conform-all conform-into meta35294]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 835, :max-fixed-arity 27, :fn-var true, :arglists (quote ([form max-count map__35288 check? gfn gen-max pred cpred kindform conform-keys kind-form addcv cfns vec__35290 distinct kindfn spec p__35287 kfn gen-into count min-count opts kind conform-all conform-into meta35294])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, nonconforming {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1333, :column 7, :end-line 1333, :end-column 20, :arglists (quote ([spec])), :doc "takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops."}, :name cljs.spec/nonconforming, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 20, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1333, :end-line 1333, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops."}, t_cljs$spec35585 {:num-fields 2, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec35585, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :type true, :anonymous true, :column 5, :line 1338, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, unform* {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 41, :column 4, :end-line 41, :end-column 11, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec y]))}, :protocol cljs.spec/Spec, :name cljs.spec/unform*, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 11, :method-params ([spec y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec y])), :doc nil}, ->sym {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 305, :column 8, :end-line 305, :end-column 13, :private true, :arglists (quote ([x])), :doc "Returns a symbol from a symbol or var"}, :private true, :name cljs.spec/->sym, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 305, :end-line 305, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns a symbol from a symbol or var"}, abbrev {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 168, :column 7, :end-line 168, :end-column 13, :arglists (quote ([form]))}, :name cljs.spec/abbrev, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 13, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, regex? {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 80, :column 7, :end-line 80, :end-column 13, :arglists (quote ([x])), :doc "returns x if x is a (clojure.spec) regex op, else logical false"}, :name cljs.spec/regex?, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "returns x if x is a (clojure.spec) regex op, else logical false"}, int-in-range? {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1396, :column 7, :end-line 1396, :end-column 20, :arglists (quote ([start end val])), :doc "Return true if start <= val and val < end"}, :name cljs.spec/int-in-range?, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 20, :method-params ([start end val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1396, :end-line 1396, :max-fixed-arity 3, :fn-var true, :arglists (quote ([start end val])), :doc "Return true if start <= val and val < end"}, dt {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 340, :column 8, :end-line 340, :end-column 10, :private true, :arglists (quote ([pred x form] [pred x form cpred?])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([pred x form] [pred x form cpred?]), :arglists ([pred x form] [pred x form cpred?]), :arglists-meta (nil nil)}}, :private true, :name cljs.spec/dt, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([pred x form] [pred x form cpred?]), :arglists ([pred x form] [pred x form cpred?]), :arglists-meta (nil nil)}, :method-params ([pred x form] [pred x form cpred?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 340, :end-line 340, :max-fixed-arity 4, :fn-var true, :arglists ([pred x form] [pred x form cpred?])}, t_cljs$spec35591 {:num-fields 5, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec35591, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :type true, :anonymous true, :column 5, :line 1358, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, preturn {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1021, :column 8, :end-line 1021, :end-column 15, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec/preturn, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 15, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1021, :end-line 1021, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, re-conform {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1199, :column 8, :end-line 1199, :end-column 18, :private true, :arglists (quote ([p [x & xs :as data]]))}, :private true, :name cljs.spec/re-conform, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 18, :method-params ([p p__35523]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1199, :end-line 1199, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [x & xs :as data]]))}, spec? {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 74, :column 7, :end-line 74, :end-column 12, :arglists (quote ([x])), :doc "returns x if x is a spec object, else logical false"}, :name cljs.spec/spec?, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "returns x if x is a spec object, else logical false"}, registry {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 300, :column 7, :end-line 300, :end-column 15, :arglists (quote ([])), :doc "returns the registry map, prefer 'get-spec' to lookup a spec by name"}, :name cljs.spec/registry, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 300, :end-line 300, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "returns the registry map, prefer 'get-spec' to lookup a spec by name"}, rep+impl {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 956, :column 19, :end-line 956, :end-column 27, :skip-wiki true, :arglists (quote ([form p])), :doc "Do not call this directly, use '+'"}, :name cljs.spec/rep+impl, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 27, :method-params ([form p]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 956, :end-line 956, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form p])), :doc "Do not call this directly, use '+'"}, deriv {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1070, :column 8, :end-line 1070, :end-column 13, :private true, :arglists (quote ([p x]))}, :private true, :name cljs.spec/deriv, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 13, :method-params ([p x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1070, :end-line 1070, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p x]))}, t_cljs$spec35588 {:num-fields 2, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec35588, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :type true, :anonymous true, :column 5, :line 1338, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec35277 {:num-fields 4, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec35277, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :type true, :anonymous true, :column 3, :line 767, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, deep-resolve {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 49, :column 8, :end-line 49, :end-column 20, :private true, :arglists (quote ([reg k]))}, :private true, :name cljs.spec/deep-resolve, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 20, :method-params ([reg k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists (quote ([reg k]))}, exercise {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1380, :column 7, :end-line 1380, :end-column 15, :arglists (quote ([spec] [spec n] [spec n overrides])), :doc "generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec] [spec n] [spec n overrides]), :arglists ([spec] [spec n] [spec n overrides]), :arglists-meta (nil nil nil)}}, :name cljs.spec/exercise, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec] [spec n] [spec n overrides]), :arglists ([spec] [spec n] [spec n overrides]), :arglists-meta (nil nil nil)}, :method-params ([spec] [spec n] [spec n overrides]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1380, :end-line 1380, :max-fixed-arity 3, :fn-var true, :arglists ([spec] [spec n] [spec n overrides]), :doc "generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen"}, explain-data {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 205, :column 7, :end-line 205, :end-column 19, :arglists (quote ([spec x])), :doc "Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."}, :name cljs.spec/explain-data, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 19, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 205, :end-line 205, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."}, tuple-impl {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 542, :column 19, :end-line 542, :end-column 29, :skip-wiki true, :arglists (quote ([forms preds] [forms preds gfn])), :doc "Do not call this directly, use 'tuple'", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([forms preds] [forms preds gfn]), :arglists ([forms preds] [forms preds gfn]), :arglists-meta (nil nil)}}, :name cljs.spec/tuple-impl, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([forms preds] [forms preds gfn]), :arglists ([forms preds] [forms preds gfn]), :arglists-meta (nil nil)}, :method-params ([forms preds] [forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 542, :end-line 542, :max-fixed-arity 3, :fn-var true, :arglists ([forms preds] [forms preds gfn]), :doc "Do not call this directly, use 'tuple'"}, multi-spec-impl {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 492, :column 19, :end-line 492, :end-column 34, :skip-wiki true, :arglists (quote ([form mmvar retag] [form mmvar retag gfn])), :doc "Do not call this directly, use 'multi-spec'", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form mmvar retag] [form mmvar retag gfn]), :arglists ([form mmvar retag] [form mmvar retag gfn]), :arglists-meta (nil nil)}}, :name cljs.spec/multi-spec-impl, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 34, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form mmvar retag] [form mmvar retag gfn]), :arglists ([form mmvar retag] [form mmvar retag gfn]), :arglists-meta (nil nil)}, :method-params ([form mmvar retag] [form mmvar retag gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 492, :end-line 492, :max-fixed-arity 4, :fn-var true, :arglists ([form mmvar retag] [form mmvar retag gfn]), :doc "Do not call this directly, use 'multi-spec'"}, t_cljs$spec35136 {:num-fields 6, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec35136, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :type true, :anonymous true, :column 6, :line 548, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, conform {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 149, :column 7, :end-line 149, :end-column 14, :arglists (quote ([spec x])), :doc "Given a spec and a value, returns :clojure.spec/invalid if value does not match spec,\n  else the (possibly destructured) value."}, :name cljs.spec/conform, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value, returns :clojure.spec/invalid if value does not match spec,\n  else the (possibly destructured) value."}, t_cljs$spec35293 {:num-fields 27, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec35293, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :type true, :anonymous true, :column 6, :line 835, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec35558 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([re gfn meta35559])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec35558, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :method-params ([re gfn meta35559]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 1241, :max-fixed-arity 3, :fn-var true, :arglists (quote ([re gfn meta35559])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, gen* {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 43, :column 4, :end-line 43, :end-column 8, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec overrides path rmap]))}, :protocol cljs.spec/Spec, :name cljs.spec/gen*, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 8, :method-params ([spec overrides path rmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 43, :max-fixed-arity 4, :fn-var true, :arglists (quote ([spec overrides path rmap])), :doc nil}, t_cljs$spec35256 {:num-fields 6, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec35256, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :type true, :anonymous true, :column 5, :line 731, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, fspec-impl {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1286, :column 19, :end-line 1286, :end-column 29, :skip-wiki true, :arglists (quote ([argspec aform retspec rform fnspec fform gfn])), :doc "Do not call this directly, use 'fspec'"}, :name cljs.spec/fspec-impl, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 29, :method-params ([argspec aform retspec rform fnspec fform gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 1286, :end-line 1286, :max-fixed-arity 7, :fn-var true, :arglists (quote ([argspec aform retspec rform fnspec fform gfn])), :doc "Do not call this directly, use 'fspec'"}, ->t_cljs$spec35150 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([keys forms preds gfn id kps specs cform meta35151])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec35150, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :method-params ([keys forms preds gfn id kps specs cform meta35151]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 648, :max-fixed-arity 9, :fn-var true, :arglists (quote ([keys forms preds gfn id kps specs cform meta35151])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, inck {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 337, :column 8, :end-line 337, :end-column 12, :private true, :arglists (quote ([m k]))}, :private true, :name cljs.spec/inck, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 12, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 337, :end-line 337, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k]))}, *coll-check-limit* {:meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 31, :column 16, :end-line 31, :end-column 34, :dynamic true}, :name cljs.spec/*coll-check-limit*, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 34, :column 1, :dynamic true, :line 31, :end-line 31, :tag number, :doc "The number of items validated in a collection spec'ed with 'every'"}, get-spec {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 312, :column 7, :end-line 312, :end-column 15, :arglists (quote ([k])), :doc "Returns spec registered for keyword/symbol/var k, or nil."}, :name cljs.spec/get-spec, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 15, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 312, :end-line 312, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "Returns spec registered for keyword/symbol/var k, or nil."}, t_cljs$spec35555 {:num-fields 3, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec35555, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :type true, :anonymous true, :column 3, :line 1241, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, gensub {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 266, :column 8, :end-line 266, :end-column 14, :private true, :arglists (quote ([spec overrides path rmap form]))}, :private true, :name cljs.spec/gensub, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 14, :method-params ([spec overrides path rmap form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 266, :end-line 266, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec overrides path rmap form]))}, the-spec {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 116, :column 8, :end-line 116, :end-column 16, :private true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"}, :private true, :name cljs.spec/the-spec, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 16, :method-params ([spec-or-k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"}, coll-prob {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 744, :column 8, :end-line 744, :end-column 17, :private true, :arglists (quote ([x kfn kform distinct count min-count max-count path via in]))}, :private true, :name cljs.spec/coll-prob, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 17, :method-params ([x kfn kform distinct count min-count max-count path via in]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 744, :end-line 744, :max-fixed-arity 10, :fn-var true, :arglists (quote ([x kfn kform distinct count min-count max-count path via in]))}, every-impl {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 792, :column 19, :end-line 792, :end-column 29, :skip-wiki true, :arglists (quote ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn :cljs.spec/cpred conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn])), :doc "Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn :cljs.spec/cpred conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn]), :arglists ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn :cljs.spec/cpred conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn]), :arglists-meta (nil nil)}}, :name cljs.spec/every-impl, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn :cljs.spec/cpred conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn]), :arglists ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn :cljs.spec/cpred conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn]), :arglists-meta (nil nil)}, :method-params ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn :cljs.spec/cpred conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 792, :end-line 792, :max-fixed-arity 4, :fn-var true, :arglists ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn :cljs.spec/cpred conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn]), :doc "Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'"}, t_cljs$spec35572 {:num-fields 9, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/t_cljs$spec35572, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :type true, :anonymous true, :column 5, :line 1290, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, accept-nil? {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1006, :column 8, :end-line 1006, :end-column 19, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec/accept-nil?, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 19, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1006, :end-line 1006, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, maybe-spec {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 105, :column 8, :end-line 105, :end-column 18, :private true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."}, :private true, :name cljs.spec/maybe-spec, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 18, :method-params ([spec-or-k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."}, spec-impl {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 459, :column 19, :end-line 459, :end-column 28, :skip-wiki true, :arglists (quote ([form pred gfn cpred?] [form pred gfn cpred? unc])), :doc "Do not call this directly, use 'spec'", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists-meta (nil nil)}}, :name cljs.spec/spec-impl, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists-meta (nil nil)}, :method-params ([form pred gfn cpred?] [form pred gfn cpred? unc]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 459, :end-line 459, :max-fixed-arity 5, :fn-var true, :arglists ([form pred gfn cpred?] [form pred gfn cpred? unc]), :doc "Do not call this directly, use 'spec'"}, ->t_cljs$spec35158 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([keys forms preds gfn id kps specs cform meta35159])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec35158, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :method-params ([keys forms preds gfn id kps specs cform meta35159]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 648, :max-fixed-arity 9, :fn-var true, :arglists (quote ([keys forms preds gfn id kps specs cform meta35159])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, invalid? {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 144, :column 7, :end-line 144, :end-column 15, :arglists (quote ([ret])), :doc "tests the validity of a conform return value"}, :name cljs.spec/invalid?, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 15, :method-params ([ret]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ret])), :doc "tests the validity of a conform return value"}, amp-impl {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 961, :column 19, :end-line 961, :end-column 27, :skip-wiki true, :arglists (quote ([re preds pred-forms])), :doc "Do not call this directly, use '&'"}, :name cljs.spec/amp-impl, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 27, :method-params ([re preds pred-forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 961, :end-line 961, :max-fixed-arity 3, :fn-var true, :arglists (quote ([re preds pred-forms])), :doc "Do not call this directly, use '&'"}, pcat* {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 928, :column 8, :end-line 928, :end-column 13, :private true, :arglists (quote ([{[p1 & pr :as ps] :ps, [k1 & kr :as ks] :ks, [f1 & fr :as forms] :forms, ret :ret, rep+ :rep+}]))}, :private true, :name cljs.spec/pcat*, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 13, :method-params ([p__35334]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 928, :end-line 928, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{[p1 & pr :as ps] :ps, [k1 & kr :as ks] :ks, [f1 & fr :as forms] :forms, ret :ret, rep+ :rep+}]))}, alt* {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 975, :column 8, :end-line 975, :end-column 12, :private true, :arglists (quote ([ps ks forms]))}, :private true, :name cljs.spec/alt*, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 12, :method-params ([ps ks forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 975, :end-line 975, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ps ks forms]))}, cat-impl {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 940, :column 19, :end-line 940, :end-column 27, :skip-wiki true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'cat'"}, :name cljs.spec/cat-impl, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 27, :method-params ([ks ps forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 940, :end-line 940, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'cat'"}, macroexpand-check {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 319, :column 8, :end-line 319, :end-column 25, :private true, :arglists (quote ([v args]))}, :private true, :name cljs.spec/macroexpand-check, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 25, :method-params ([v args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 319, :end-line 319, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v args]))}, reg-resolve {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 55, :column 8, :end-line 55, :end-column 19, :private true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident"}, :private true, :name cljs.spec/reg-resolve, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 19, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident"}, explain-str {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 259, :column 7, :end-line 259, :end-column 18, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, returns an explanation as a string."}, :name cljs.spec/explain-str, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 18, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, returns an explanation as a string."}, *compile-asserts* {:meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1420, :column 3, :end-line 1420, :end-column 20, :dynamic true, :doc "If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."}, :name cljs.spec/*compile-asserts*, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 20, :column 1, :dynamic true, :line 1413, :end-line 1420, :tag boolean, :doc "If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."}, with-gen {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 192, :column 7, :end-line 192, :end-column 15, :arglists (quote ([spec gen-fn])), :doc "Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"}, :name cljs.spec/with-gen, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 15, :method-params ([spec gen-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec gen-fn])), :doc "Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"}, ->t_cljs$spec35555 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([re gfn meta35556])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec35555, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :method-params ([re gfn meta35556]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 1241, :max-fixed-arity 3, :fn-var true, :arglists (quote ([re gfn meta35556])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, conform* {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 40, :column 4, :end-line 40, :end-column 12, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec x]))}, :protocol cljs.spec/Spec, :name cljs.spec/conform*, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 12, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc nil}, check-asserts? {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1428, :column 16, :end-line 1428, :end-column 30, :tag boolean, :arglists (quote ([])), :doc "Returns the value set by check-asserts."}, :name cljs.spec/check-asserts?, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1428, :ret-tag boolean, :end-line 1428, :max-fixed-arity 0, :tag boolean, :fn-var true, :arglists (quote ([])), :doc "Returns the value set by check-asserts."}, ->t_cljs$spec35277 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn meta35278])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec35277, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :method-params ([forms preds gfn meta35278]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 767, :max-fixed-arity 4, :fn-var true, :arglists (quote ([forms preds gfn meta35278])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec35260 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn specs cform meta35261])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec35260, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :method-params ([forms preds gfn specs cform meta35261]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 731, :max-fixed-arity 6, :fn-var true, :arglists (quote ([forms preds gfn specs cform meta35261])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, noret? {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 998, :column 8, :end-line 998, :end-column 14, :private true, :arglists (quote ([p1 pret]))}, :private true, :name cljs.spec/noret?, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 14, :method-params ([p1 pret]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 998, :end-line 998, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 pret]))}, rep-impl {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 952, :column 19, :end-line 952, :end-column 27, :skip-wiki true, :arglists (quote ([form p])), :doc "Do not call this directly, use '*'"}, :name cljs.spec/rep-impl, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 27, :method-params ([form p]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 952, :end-line 952, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form p])), :doc "Do not call this directly, use '*'"}, t_cljs$spec35568 {:num-fields 9, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/t_cljs$spec35568, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :type true, :anonymous true, :column 5, :line 1290, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, op-describe {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1090, :column 8, :end-line 1090, :end-column 19, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec/op-describe, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 19, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1090, :end-line 1090, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, describe {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 187, :column 7, :end-line 187, :end-column 15, :arglists (quote ([spec])), :doc "returns an abbreviated description of the spec as data"}, :name cljs.spec/describe, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 15, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "returns an abbreviated description of the spec as data"}, explain-1 {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 369, :column 8, :end-line 369, :end-column 17, :private true, :arglists (quote ([form pred path via in v]))}, :private true, :name cljs.spec/explain-1, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 17, :method-params ([form pred path via in v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 369, :end-line 369, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form pred path via in v]))}, explain-out {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 248, :column 7, :end-line 248, :end-column 18, :arglists (quote ([ed])), :doc "Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."}, :name cljs.spec/explain-out, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 18, :method-params ([ed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 248, :end-line 248, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ed])), :doc "Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."}, re-gen {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1161, :column 8, :end-line 1161, :end-column 14, :private true, :arglists (quote ([p overrides path rmap f]))}, :private true, :name cljs.spec/re-gen, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 14, :method-params ([p overrides path rmap f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1161, :end-line 1161, :max-fixed-arity 5, :fn-var true, :arglists (quote ([p overrides path rmap f]))}, filter-alt {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 966, :column 8, :end-line 966, :end-column 18, :private true, :arglists (quote ([ps ks forms f]))}, :private true, :name cljs.spec/filter-alt, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 18, :method-params ([ps ks forms f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 966, :end-line 966, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ps ks forms f]))}, and-preds {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 677, :column 8, :end-line 677, :end-column 17, :private true, :arglists (quote ([x preds forms]))}, :private true, :name cljs.spec/and-preds, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 17, :method-params ([x preds forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 677, :end-line 677, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x preds forms]))}, ->t_cljs$spec35103 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form pred gfn cpred? unc meta35104])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec35103, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :method-params ([form pred gfn cpred? unc meta35104]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 468, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form pred gfn cpred? unc meta35104])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, call-valid? {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1265, :column 8, :end-line 1265, :end-column 19, :private true, :arglists (quote ([f specs args]))}, :private true, :name cljs.spec/call-valid?, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 19, :method-params ([f specs args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1265, :end-line 1265, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f specs args]))}, op-unform {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1036, :column 8, :end-line 1036, :end-column 17, :private true, :arglists (quote ([p x]))}, :private true, :name cljs.spec/op-unform, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 17, :method-params ([p x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1036, :end-line 1036, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p x]))}, rep* {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 945, :column 8, :end-line 945, :end-column 12, :private true, :arglists (quote ([p1 p2 ret splice form]))}, :private true, :name cljs.spec/rep*, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 12, :method-params ([p1 p2 ret splice form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 945, :end-line 945, :max-fixed-arity 5, :fn-var true, :arglists (quote ([p1 p2 ret splice form]))}, specize* {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 124, :column 4, :end-line 124, :end-column 12, :protocol cljs.spec/Specize, :doc nil, :arglists (quote ([_] [_ form])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([_] [_ form]), :arglists ([_] [_ form]), :arglists-meta (nil nil)}}, :protocol cljs.spec/Specize, :name cljs.spec/specize*, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([_] [_ form]), :arglists ([_] [_ form]), :arglists-meta (nil nil)}, :method-params ([_] [_ form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 124, :max-fixed-arity 2, :fn-var true, :arglists ([_] [_ form]), :doc nil}, maybe-impl {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 994, :column 19, :end-line 994, :end-column 29, :skip-wiki true, :arglists (quote ([p form])), :doc "Do not call this directly, use '?'"}, :name cljs.spec/maybe-impl, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 29, :method-params ([p form]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 994, :end-line 994, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p form])), :doc "Do not call this directly, use '?'"}, pcat {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 938, :column 8, :end-line 938, :end-column 12, :private true, :arglists (quote ([& ps])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}}, :private true, :name cljs.spec/pcat, :variadic true, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}, :method-params [(ps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 938, :end-line 938, :max-fixed-arity 0, :fn-var true, :arglists ([& ps])}, explain* {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 42, :column 4, :end-line 42, :end-column 12, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec path via in x]))}, :protocol cljs.spec/Spec, :name cljs.spec/explain*, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 12, :method-params ([spec path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 42, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec path via in x])), :doc nil}, validate-fn {:protocol-inline nil, :meta {:file "C:\\Users\\karad\\study\\descjop\\reframe_test\\app\\dev\\js\\out_front\\cljs\\spec.cljs", :line 1276, :column 8, :end-line 1276, :end-column 19, :private true, :arglists (quote ([f specs iters])), :doc "returns f if valid, else smallest"}, :private true, :name cljs.spec/validate-fn, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :end-column 19, :method-params ([f specs iters]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1276, :end-line 1276, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f specs iters])), :doc "returns f if valid, else smallest"}, ->t_cljs$spec35572 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :factory :positional, :arglists (quote ([argspec aform retspec rform fnspec fform gfn specs meta35573])), :file nil}, :protocols #{cljs.spec/Specize cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/->t_cljs$spec35572, :variadic false, :file "app\\dev\\js\\out_front\\cljs\\spec.cljs", :method-params ([argspec aform retspec rform fnspec fform gfn specs meta35573]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1290, :max-fixed-arity 9, :fn-var true, :arglists (quote ([argspec aform retspec rform fnspec fform gfn specs meta35573])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}}, :require-macros {c cljs.core, cljs.core cljs.core, s cljs.spec, cljs.spec cljs.spec, gen cljs.spec.impl.gen, cljs.spec.impl.gen cljs.spec.impl.gen}, :cljs.analyzer/constants {:seen #{form tag max-count :args :max-tries :path :req-un :opt-un cljs.spec/keys unc :cljs.spec/invalid cljs.spec/merge :p2 :ret :gfn map__35288 meta35569 :pred-exprs :into :keys-pred meta35278 vector? :gen-max map :shrunk :fn cljs.core/vector? predx :rep+ meta35015 :cljs.spec/amp cljs.core/= cljs.spec/nonconforming :opt-keys aform keys->specnames :pred dval :splice check? forms opt argspec :else :cljs.spec/k :ks cljs.core/count req-un opt-un :cljs.spec/args meta35592 p__35011 :_ :maybe :via meta35559 :cljs.spec/kfn zipmap :req-specs gfn gen-max fnspec cljs.spec/multi-spec v map? pred-exprs meta35589 :conform-keys keys-pred cpred? meta35586 argm fn :val fform opt-keys pred meta35119 :cljs.spec/alt p1__35580# cljs.core/map? :cljs.spec/conform-all :p1 :cljs.spec/pred meta35573 cljs.core/zipmap :cljs.spec/nil cpred % :cljs.spec/pcat cljs.core/map meta35294 cljs.spec/conformer method :distinct cljs.spec/? req-specs cljs.spec/* kindform :cljs.spec/failure re conform-keys kps :reason preds kind-form cljs.spec/+ :req addcv :cljs.spec/name :cljs.spec/unknown :cljs.spec/recursion-limit cfns nil? :assertion-failed fn* meta35556 cljs.core/<= cljs.spec/alt meta35261 meta35257 :id vec__35290 :min-count p1__35579# :kind :cljs.spec/rep :smallest cljs.core/set? :count cnt mmvar :req-keys retag meta35104 k cljs.core/fn cljs.core/list? distinct retspec :cljs.spec/accept :opt-specs cljs.spec/and :cljs.spec/kind-form cljs.spec/cat map__35051 rform ifn? kindfn :pred-forms req meta35137 cljs.spec/every spec :cljs.spec/gfn keys distinct? p__35287 :max-count cljs.spec/or kfn :max-elements gen-into cljs.core/seqable? cljs.core/coll? meta35595 id :num-elements cljs.spec/fspec specs cljs.spec/tuple count req-keys apply :cljs.spec/op min-count cljs.spec/nilable opts kind :cljs.spec/v cform :min-elements meta35151 clojure.spec/& opt-specs map__35012 conform-all :cljs.spec/problems :cljs.spec/cpred :forms :ps k->s meta35159 :cljs.spec/kvs->map :in conform-into :accept :opt meta35054 pred-forms meta35275}, :order [:cljs.spec/op :cljs.spec/name :cljs.spec/unknown :cljs.spec/invalid fn % :else :cljs.spec/gfn :cljs.spec/problems :path :pred :val :reason :via :in :cljs.spec/recursion-limit :args :cljs.spec/args :opt :req-un :opt-un :gfn :pred-exprs :keys-pred :opt-keys :req-specs :req :req-keys :opt-specs :pred-forms map? cljs.spec/keys keys->specnames opt req-un opt-un p__35011 gfn pred-exprs keys-pred argm opt-keys req-specs req id req-keys opt-specs map__35012 k->s pred-forms meta35015 map__35051 meta35054 form pred cpred? unc meta35104 method cljs.spec/multi-spec mmvar retag predx dval tag meta35119 vector? cljs.core/= cljs.core/count cljs.spec/tuple forms preds specs cnt meta35137 cljs.spec/or keys kps cform meta35151 meta35159 cljs.spec/and meta35257 meta35261 cljs.core/coll? cljs.core/<= distinct? cljs.spec/merge meta35275 meta35278 :max-count :cljs.spec/kfn :gen-max :cljs.spec/conform-all :conform-keys :distinct :cljs.spec/kind-form :into :count :min-count :kind :cljs.spec/cpred cljs.core/map? cljs.core/vector? cljs.core/list? cljs.core/set? cljs.core/seqable? :num-elements :max-tries :min-elements :max-elements cljs.spec/every max-count map__35288 check? gen-max cpred kindform conform-keys kind-form addcv cfns vec__35290 distinct kindfn spec p__35287 kfn gen-into count min-count opts kind conform-all conform-into meta35294 :ret :cljs.spec/accept :ps :ks :forms :rep+ :cljs.spec/pcat :p2 :splice :id :cljs.spec/rep :p1 cljs.spec/* :cljs.spec/amp :cljs.spec/alt :cljs.spec/nil :maybe clojure.spec/& cljs.spec/+ cljs.spec/cat :_ cljs.spec/? cljs.spec/alt :accept re meta35556 meta35559 :fn :smallest :shrunk apply ifn? cljs.spec/fspec argspec aform retspec rform fnspec fform meta35569 meta35573 :cljs.spec/kvs->map cljs.spec/conformer fn* p1__35579# cljs.core/zipmap cljs.core/map :cljs.spec/k :cljs.spec/v p1__35580# cljs.core/fn k v zipmap map cljs.spec/nonconforming meta35586 meta35589 :cljs.spec/pred nil? cljs.spec/nilable meta35592 meta35595 :cljs.spec/failure :assertion-failed]}, :doc nil}